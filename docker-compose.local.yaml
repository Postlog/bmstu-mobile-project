version: "3.8"
services:
  service-image-storage:
    container_name: service-image-storage
    build:
      context: ./service-image-storage
      dockerfile: Dockerfile
    environment:
      - SERVER_PORT=8080
      - IMAGES_FOLDER_PATH=./images
      - APP_ENV=local
    ports:
      - "8081:8080"
    volumes:
      - image-storage-volume:/images
    networks:
      - global
    restart: unless-stopped
    healthcheck:
      test: curl http://127.0.0.1:8080/info
      interval: 5s
      retries: 2
      start_period: 10s
      timeout: 2s

  service-api-composition:
    container_name: service-api-composition
    depends_on:
      api-composition-postgres:
        condition: service_healthy
      rabbit-mq:
        condition: service_healthy
    build:
      context: ./service-api-composition
      dockerfile: Dockerfile
    ports:
      - "80:8080"
    environment:
      - SERVER_PORT=8080
      - SERVICE_IMAGE_STORAGE_URL=http://service-image-storage:8080
      - SERVICE_IMAGE_STORAGE_TIMEOUT=1s
      - RABBITMQ_DSN=amqp://rmuser:biba220@rabbit-mq:5672/
      - POSTGRES_HOST=api-composition-postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB_NAME=api_composition
      - APP_ENV=local
    networks:
      - global
    restart: unless-stopped
    healthcheck:
      test: curl http://127.0.0.1:8080/info
      interval: 5s
      retries: 2
      start_period: 10s
      timeout: 2s

  api-composition-postgres:
    container_name: api-composition-postgres
    image: postgres:16
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=api_composition
    volumes:
      - ./service-api-composition/db/migration.sql:/docker-entrypoint-initdb.d/migration.sql
      - api-composition-postgres-volume:/var/lib/postgresql
    ports:
      - "2345:5432"
    networks:
      - global
    restart: unless-stopped
    healthcheck:
      test: pg_isready -U postgres
      interval: 5s
      retries: 4
      start_period: 20s
      timeout: 5s

  rabbit-mq:
    container_name: rabbit-mq
    build:
      context: ./rabbit-mq
      dockerfile: Dockerfile
    hostname: rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    volumes:
      - ./rabbit-mq/config.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./rabbit-mq/definitions.json:/etc/rabbitmq/definitions.json:ro
      - rabbitmq-volume:/var/lib/rabbitmq
    networks:
      - global
    restart: unless-stopped
    healthcheck:
      test: curl -f http://127.0.0.1:15672/
      interval: 5s
      timeout: 30s
      start_period: 30s
      retries: 3


networks:
  global:

volumes:
  image-storage-volume:
  api-composition-postgres-volume:
  rabbitmq-volume:
